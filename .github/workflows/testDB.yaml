# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go
name: TestDB

on:
  # 練習僅限手動觸發
  workflow_dispatch:

jobs:

  test:
    name: TestDB
    runs-on: self-hosted
    # Service containers to run with `runner-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: public.ecr.aws/docker/library/postgres:16.1-alpine3.19
        # Provide the password for postgres
        env:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: secret
          POSTGRES_DB: simple_bank
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
    steps:
      - name: STEP 1 - Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      # https://github.com/golang-migrate/migrate/tree/master/cmd/migrate
      - name: STEP 2 - Install golang-migrate CLI
        run: |
          curl -L https://github.com/golang-migrate/migrate/releases/download/v4.17.0/migrate.linux-amd64.tar.gz | tar xvz
          sudo mv migrate /usr/bin/migrate
          which migrate

      - name: STEP 3 - Check out code
        uses: actions/checkout@v3

      - name: STEP 4 - Run DB migrations
        run: run make migrate_up

      # 可以使用 make 指令
      - name: STEP 5 - Run test
        run: make test_db